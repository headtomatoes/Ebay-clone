# ===================================================================
# Application Configuration
# ===================================================================
spring.application.name=ebay_clone
  
# ===================================================================
# Server Configuration
# ===================================================================
# Server Port (Can also be set via SERVER_PORT environment variable if needed)
server.port=${SERVER_PORT:8082}

# ===================================================================
# Database Configuration
# ===================================================================
# Uses environment variables for database connection.
# Ensure DB_URL, DB_USERNAME, and DB_PASSWORD are set in your environment.
# Example values for your .env file or environment:
# DB_URL=jdbc:mysql://localhost:3307/Ebay_clone_db
# DB_USERNAME=wad
# DB_PASSWORD=0987654321q
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# ===================================================================
# JPA / Hibernate Configuration
# ===================================================================
spring.jpa.hibernate.ddl-auto=${DDL_AUTO:validate}
# e.g., validate, update, create
spring.jpa.show-sql=${SHOW_SQL:true}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# ===================================================================
# Liquibase Configuration (Database Migration Tool)
# ===================================================================
# spring.liquibase.enabled=${LIQUIBASE_ENABLED:true}
# spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.xml

# ===================================================================
# Logging Configuration
# ===================================================================
# General debug flag (enables some auto-configuration debug reports)
debug=${APP_DEBUG:true}

# Specific logging levels (useful if using WebSockets)
logging.level.org.springframework.web.socket=${LOG_LEVEL_WEBSOCKET:DEBUG}
logging.level.org.springframework.messaging=${LOG_LEVEL_MESSAGING:DEBUG}
logging.level.org.apache.tomcat.websocket=${LOG_LEVEL_TOMCAT_WEBSOCKET:DEBUG}

# ===================================================================
# JWT (JSON Web Token) Configuration
# ===================================================================
# IMPORTANT: JWT_SECRET must be a strong, unique key managed via environment variables.
# Example value for your .env file or environment:
# JWT_SECRET=1ilXgXfrANdVPpq6Kjo4YxybCugkQk8uW9nO3UKB6QiyWS7Fk/8qkvD2cIQ7wo/r7TDvfuWVzdoX2ifZCNcRUg==
jwt.secret=1ilXgXfrANdVPpq6Kjo4YxybCugkQk8uW9nO3UKB6QiyWS7Fk/8qkvD2cIQ7wo/r7TDvfuWVzdoX2ifZCNcRUg==
jwt.expiration.ms=${JWT_EXPIRATION_MS}
# Token expiration time in milliseconds (default: 24 hours)

# ===================================================================
# OAuth2 Google Client Configuration
# ===================================================================
# Ensure GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET are set in your environment.
# Example values for your .env file or environment:
# GOOGLE_CLIENT_ID=227581275163-hjd4g8qpl5kilkeijirsammqj7topfgj.apps.googleusercontent.com
# GOOGLE_CLIENT_SECRET=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
# GOOGLE_REDIRECT_URI=http://localhost:8082/login/oauth2/code/google OR your deployed URI
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_REDIRECT_URI}
spring.security.oauth2.client.registration.google.scope=openid,profile,email

# spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
# spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
# spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
# spring.security.oauth2.client.provider.google.user-name-attribute=sub

# ===================================================================
# Spring Mail Configuration (for Gmail)
# ===================================================================
# Ensure EMAIL_USER and EMAIL_PASS (Gmail App Password if 2FA is on) are set in your environment.
# Example values for your .env file or environment:
# EMAIL_USER=your.email@gmail.com
# EMAIL_PASS=your_gmail_app_password
spring.mail.host=smtp.gmail.com
spring.mail.port=587
# Port for TLS
spring.mail.username=${EMAIL_USER}
spring.mail.password=${EMAIL_PASS}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.debug=${MAIL_DEBUG:true}
# Set to false in production

# ===================================================================
# Stripe Configuration
# ===================================================================
# IMPORTANT: Manage these via environment variables in production.
# Example values for your .env file or environment:
# STRIPE_API_KEY_SECRET=sk_test_YOUR_STRIPE_SECRET_KEY
# STRIPE_WEBHOOK_SECRET=whsec_YOUR_STRIPE_WEBHOOK_SIGNING_SECRET
stripe.api.key.secret=${STRIPE_API_KEY_SECRET}
stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET}

# ===================================================================
# Frontend Configuration (example if backend needs to know frontend URL)
# ===================================================================
# Example value for your .env file or environment:
# VITE_API_BASE_URL=http://localhost:8082 (This is actually your backend URL)
# If you need your FRONTEND_URL for CORS or redirects:
# FRONTEND_URL=http://localhost:5173 (or whatever your Vite frontend runs on)
# app.frontend.url=${FRONTEND_URL:http://localhost:5173}
app.frontend.url=${FRONTEND_URL}
# Example: for CORS configuration